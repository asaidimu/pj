# -- about ---=============================================================== #
# NAME        : npm
# VERSION     : 1.0
# DESCRIPTION : a base project folder for npm packages
# REQUIRES    :

# AUTHOR      : Lolokile Saidimu
# LICENSE     : MIT
# =========================================================================== #

# -- start with base --
source "$RECIPES_PATH/base"

inform "Setting up an bun project."

check_command "bun"

package_name=$(question "Enter package name (e.g., my-package):" $project)
package_description=$(question "Enter package description" "")
package_scope=$(question "Enter package scope without @:" "")
author_name=$(question "Enter your name" `git config user.name`)
author_email=$(question "Enter your email" `git config user.email`)
github_username=$(question "Enter your github username" "")

if [ ! -z "$package_scope" ]; then
    full_package_name="@$package_scope/$package_name"
else
    full_package_name="$package_name"
fi

cd "$PROJECT_PATH"
mkdir -p src/ docs .github/workflows

inform "Creating index.ts"
cat > index.ts <<EOF

function main(){
  console.log("Hello, World!")
}

main()
EOF

inform "Creating sync-package.ts"
cat > .sync-package.ts <<EOF
import { readFileSync, writeFileSync } from "fs";

function updateDistPackage() {
  const packageJson = JSON.parse(readFileSync("package.json", "utf8"));
  const distPackageJson = JSON.parse(readFileSync("dist.package.json", "utf8"));

  // Replace dependencies in dist.package.json
  distPackageJson.dependencies = packageJson.dependencies || {};

  // Write back to dist.package.json
  writeFileSync("dist.package.json", JSON.stringify(distPackageJson, null, 2) + "\n");

  console.log("Updated dist.package.json successfully!");
}

updateDistPackage()
EOF

inform  "Creating dist.package.json"
cat > dist.package.json << EOF
{
  "name": "${full_package_name}",
  "version": "1.0.0",
  "description": "${package_description}",
  "main": "index.js",
  "types": "index.d.ts",
  "files": [
    "./*"
  ],
  "keywords": [
    "typescript",
  ],
  "author": "${author_name} <${author_email}>",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/${github_username}/${package_name}.git"
  },
  "bugs": {
    "url": "https://github.com/${github_username}/${package_name}/issues"
  },
  "homepage": "https://github.com/${github_username}/${package_name}#readme",
  "publishConfig": {
    "registry": "https://registry.npmjs.org/",
    "tag": "latest",
    "access": "public"
  }
}
EOF

inform  "Creating package.json..."
cat > package.json << EOF
{
  "name": "${full_package_name}",
  "version": "1.0.0",
  "description": "${package_description}",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "ci": "bun install",
    "clean": "[ -e ./dist ] && rm -rf ./dist || echo No dist",
    "prebuild": "bun clean && bun run .sync-package.ts",
    "build": "tsup index.ts --format cjs,esm --dts",
    "postbuild": "cp README.md LICENSE.md ./dist && cp ./dist.package.json ./dist/package.json"
  },
  "keywords": [
    "typescript",
  ],
  "author": "${author_name} <${author_email}>",
  "license": "MIT",
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^5.57.0",
    "@typescript-eslint/parser": "^5.57.0",
    "eslint": "^8.37.0",
    "typescript": "^5.0.3",
    "tsup": "^7.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/${github_username}/${package_name}.git"
  },
  "bugs": {
    "url": "https://github.com/${github_username}/${package_name}/issues"
  },
  "homepage": "https://github.com/${github_username}/${package_name}#readme",
  "release": {
      "branches": [
          "main"
      ],
      "plugins": [
          "@semantic-release/commit-analyzer",
          "@semantic-release/release-notes-generator",
          [
              "@semantic-release/changelog",
              {
                  "changelogFile": "CHANGELOG.md"
              }
          ],
          [
              "@semantic-release/npm",
              {
                  "pkgRoot": "dist"
              }
          ],
          [
              "@semantic-release/git",
              {
                  "assets": [
                      "CHANGELOG.md",
                      "dist.package.json"
                  ],
                  "message": "chore(release): Release v\${nextRelease.version}\\n\\n\${nextRelease.notes}"
              }
          ]
      ]
  }

}
EOF

inform "Creating tsconfig.json..."
cat > tsconfig.json << EOF
{
  "compilerOptions": {
    "lib": ["ESNext", "DOM"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "allowJs": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noPropertyAccessFromIndexSignature": false,
    "outDir": "./dist"
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}
EOF

inform "Creating .eslintrc.js..."
cat > .eslintrc.js << EOF
module.exports = {
  parser: '@typescript-eslint/parser',
  extends: [
    'plugin:@typescript-eslint/recommended'
  ],
  parserOptions: {
    ecmaVersion: 2018,
    sourceType: 'module',
  },
  rules: {}
};
EOF

# GitHub Actions workflow
inform "Creating GitHub Actions workflow..."
cat > .github/workflows/version.yml << EOF
name: Versioning Workflow

on:
  workflow_run:
    workflows: ["Test Workflow"]
    types:
      - completed

jobs:
  version:
    if: \${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          node-version: "latest"

      - name: Install dependencies
        run: bun run ci

      - name: Build
        run: bun run build

      - name: version
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: \${{ secrets.NPM_TOKEN }}
EOF

# README.md
inform "Creating README.md..."
cat > README.md << EOF
# ${package_name}

[![bun version](https://badge.fury.io/js/${full_package_name}.svg)](https://badge.fury.io/js/${full_package_name})
[![Build Status](https://github.com/${github_username}/${package_name}/workflows/CI/badge.svg)](https://github.com/${github_username}/${package_name}/actions)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

${package_description}

## Installation

\`\`\`bash
bun install ${full_package_name}
\`\`\`

or

\`\`\`bash
yarn add ${full_package_name}
\`\`\`

## Usage

\`\`\`typescript

\`\`\`

## Contributing

1. Fork the repository
2. Create your feature branch (\`git checkout -b feature/amazing-feature\`)
3. Commit your changes (\`git commit -m 'Add some amazing feature'\`)
4. Push to the branch (\`git push origin feature/amazing-feature\`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
EOF

# Create .gitignore
inform "Creating .gitignore..."
cat >> .gitignore << EOF
node_modules/
dist/
coverage/
.env
*.log
.DS_Store
EOF

# Create .npmignore
inform "Creating .npmignore..."
cat > .bunignore << EOF
src/
__tests__/
coverage/
.github/
.gitignore
.eslintrc.js
jest.config.js
tsconfig.json
*.log
EOF

# Create LICENSE
inform "Creating LICENSE..."
cat > LICENSE << EOF
MIT License

Copyright (c) $(date +%Y) ${author_name}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

# Initialize bun project
inform "Installing dependencies..."
bun install

# Initialize git repository
inform "Initializing git repository..."
git add .
git commit -m "Initial commit"

inform "Package setup complete! ðŸŽ‰"
inform "Next steps:"
echo "1. cd ${package_name}"
echo "2. Review and update the package content"
echo "3. Run 'bun test' to verify everything works"
echo "4. Create a repository on GitHub"
echo "5. Push your code: git remote add origin <repository-url> && git push -u origin main"

# vim:set et sw=2 ts=4 tw=80 ft=sh:
